<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// Copyright (c) All contributors. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

/* THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
 * CHANGE THE .tt FILE INSTEAD. */

namespace Paspan.Fluent;

public static partial class Parsers
{
    public static Parser<string> AsString<T>(this Parser<T> parser) => new SequenceSkipAnd<T, string>(parser, new StringValue());
<# for (int i = 2; i <= 7; i++) { #>
        /// <summary>
        /// Builds a parser that ensure the specified parsers match consecutively and adds Value from reader as string.
        /// </summary>
<#     var tStr = string.Join(", ", Enumerable.Range(1, i).Select(v => $"T{v}")); #>
<#     var tStr2 = string.Join(", ", Enumerable.Range(1, i - 1).Select(v => $"T{v}")); #>
    public static Parser<(<#= tStr2 #>, string)> AsString<<#= tStr #>>(this Parser<(<#= tStr #>)> parser)
        => new SequenceSkipAnd<<#= tStr #>, string>(parser, new StringValue());

<# } #>

}
